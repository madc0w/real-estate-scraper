/**
 * Test that the encoding fix is working in the actual costMap.cjs
 */

// Mock a single property with the problematic address
const testProperty = {
	Location:
		'Rue de la Vieille Forge, Neunkirchen-lÔøΩs-Bouzonville, 57320, Boulay-Moselle, Lorraine, France',
	'Price From': '459000',
	'Area From': '260',
};

// Import the geocoding function from costMap.cjs
// Since it's a .cjs file, we'll extract the relevant part and test it

async function testCostMapEncoding() {
	console.log('üîß Testing Encoding Fix in costMap.cjs Context');
	console.log('='.repeat(50));

	// Replicate the exact encoding fix logic from costMap.cjs
	function fixEncodingLikeCostMap(address) {
		const cleanAddress = address
			// Fix corrupted characters FIRST (encoding issues that are already corrupted)
			.replace(/SÔøΩre/g, 'Sure') // Specific fix for S√ªre -> SÔøΩre
			.replace(/StraÔøΩe/g, 'Strasse') // Specific fix for Stra√üe -> StraÔøΩe
			.replace(/lÔøΩs-/g, 'les-') // Specific fix for l√®s- -> lÔøΩs- (French) - MAIN FIX
			.replace(/l\?s-/g, 'les-') // Specific fix for l√®s- -> l?s- (French) - Alternative encoding
			.replace(/\?/g, 'e') // Generic fix for corrupted √® -> ?
			.replace(/ÔøΩe/g, 'sse') // Fix corrupted √üe -> ÔøΩe
			.replace(/ÔøΩ/g, 'e') // Generic fix for corrupted √® -> ÔøΩ (UPDATED)
			// German characters (proper Unicode)
			.replace(/√ü/g, 'ss') // German eszett
			.replace(/√§/g, 'ae') // German a-umlaut
			.replace(/√∂/g, 'oe') // German o-umlaut
			.replace(/√º/g, 'ue') // German u-umlaut
			.replace(/√Ñ/g, 'Ae') // German A-umlaut
			.replace(/√ñ/g, 'Oe') // German O-umlaut
			.replace(/√ú/g, 'Ue') // German U-umlaut
			// French characters
			.replace(/[√†√°√¢√£√§√•]/g, 'a') // French a variants
			.replace(/[√®√©√™√´]/g, 'e') // French e variants
			.replace(/[√¨√≠√Æ√Ø]/g, 'i') // French i variants
			.replace(/[√≤√≥√¥√µ√∂]/g, 'o') // French o variants
			.replace(/[√π√∫√ª√º]/g, 'u') // French u variants
			.replace(/√ß/g, 'c') // French cedilla
			.replace(/√±/g, 'n') // Spanish/French n
			// Remove any remaining problematic characters but keep basic punctuation
			.replace(/[^\x00-\x7F\s\-,.']/g, '')
			.replace(/\s+/g, ' ') // Normalize whitespace
			.trim();

		return cleanAddress;
	}

	console.log('\nüìã Test Property:');
	console.log(`   Location: ${testProperty.Location}`);
	console.log(`   Price: ‚Ç¨${testProperty['Price From']}`);
	console.log(`   Area: ${testProperty['Area From']}m¬≤`);

	console.log('\nüîß Applying costMap.cjs encoding fix:');
	const fixedLocation = fixEncodingLikeCostMap(testProperty.Location);
	console.log(`   Fixed Location: ${fixedLocation}`);

	console.log('\nüîç Character comparison:');
	console.log(
		`   Original contains "lÔøΩs": ${testProperty.Location.includes('lÔøΩs')}`
	);
	console.log(`   Fixed contains "les": ${fixedLocation.includes('les')}`);
	console.log(`   Fixed contains "lÔøΩs": ${fixedLocation.includes('lÔøΩs')}`);

	const isProperlyFixed =
		fixedLocation.includes('les') && !fixedLocation.includes('lÔøΩs');
	console.log(
		`\n‚úÖ Result: ${
			isProperlyFixed ? 'ENCODING FIX WORKING' : 'FIX NOT WORKING'
		}`
	);

	console.log('\nüåê URL encoded for geocoding:');
	console.log(`   ${encodeURIComponent(fixedLocation)}`);

	if (isProperlyFixed) {
		console.log(
			'\nüéâ SUCCESS! The costMap.cjs fix will work for your geocoding issue.'
		);
		console.log('   Run the main script to see the geocoding in action.');
	}

	return isProperlyFixed;
}

testCostMapEncoding();
