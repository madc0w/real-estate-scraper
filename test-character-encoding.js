/**
 * Test character encoding fixes for German and other European addresses
 */

function testCharacterEncoding() {
	console.log('üß™ Testing Character Encoding Fixes');
	console.log('='.repeat(50));

	// Test cases with various encoding issues
	const testCases = [
		// Your specific German case
		{
			original:
				'31 Von Vah Stra√üe, Mettlach, 66693, Merzig-Wadern, Saarland, Germany',
			corrupted:
				'31 Von Vah StraÔøΩe, Mettlach, 66693, Merzig-Wadern, Saarland, Germany',
			expected:
				'31 Von Vah Strasse, Mettlach, 66693, Merzig-Wadern, Saarland, Germany',
		},
		// Belgian case you already found
		{
			original:
				'274 Chauss√©e de Saint Hubert, Vaux-sur-S√ªre, 6640, Bastogne, Province-de-Luxembourg, Belgium',
			corrupted:
				'274 Chaussee de Saint Hubert, Vaux-sur-SÔøΩre, 6640, Bastogne, Province-de-Luxembourg, Belgium',
			expected:
				'274 Chaussee de Saint Hubert, Vaux-sur-Sure, 6640, Bastogne, Province-de-Luxembourg, Belgium',
		},
		// Other German examples
		{
			original: 'K√∂nigstra√üe 45, M√ºnchen, 80539, Bayern, Germany',
			corrupted: 'KÔøΩnigstraÔøΩe 45, MÔøΩnchen, 80539, Bayern, Germany',
			expected: 'Koenigstrasse 45, Muenchen, 80539, Bayern, Germany',
		},
		// French examples
		{
			original: 'Rue de la Paix, Strasbourg, 67000, Bas-Rhin, France',
			corrupted: 'Rue de la Paix, Strasbourg, 67000, Bas-Rhin, France',
			expected: 'Rue de la Paix, Strasbourg, 67000, Bas-Rhin, France',
		},
	];

	// Define the character encoding fix function (same as in costMap.cjs)
	function fixCharacterEncoding(address) {
		return (
			address
				// German characters
				.replace(/√ü/g, 'ss') // German eszett
				.replace(/√§/g, 'ae') // German a-umlaut
				.replace(/√∂/g, 'oe') // German o-umlaut
				.replace(/√º/g, 'ue') // German u-umlaut
				.replace(/√Ñ/g, 'Ae') // German A-umlaut
				.replace(/√ñ/g, 'Oe') // German O-umlaut
				.replace(/√ú/g, 'Ue') // German U-umlaut
				// French characters
				.replace(/[√†√°√¢√£√§√•]/g, 'a') // French a variants
				.replace(/[√®√©√™√´]/g, 'e') // French e variants
				.replace(/[√¨√≠√Æ√Ø]/g, 'i') // French i variants
				.replace(/[√≤√≥√¥√µ√∂]/g, 'o') // French o variants
				.replace(/[√π√∫√ª√º]/g, 'u') // French u variants
				.replace(/√ß/g, 'c') // French cedilla
				.replace(/√±/g, 'n') // Spanish/French n
				// Fix corrupted characters (encoding issues)
				.replace(/SÔøΩre/g, 'Sure') // Specific fix for S√ªre -> SÔøΩre
				.replace(/StraÔøΩe/g, 'Strasse') // Specific fix for Stra√üe -> StraÔøΩe
				.replace(/ÔøΩ/g, 'ss') // Generic fix for corrupted √ü
				// Remove any remaining problematic characters but keep basic punctuation
				.replace(/[^\x00-\x7F\s\-,.']/g, '')
				.replace(/\s+/g, ' ') // Normalize whitespace
				.trim()
		);
	}

	testCases.forEach((testCase, index) => {
		console.log(`\nüìã Test Case ${index + 1}:`);
		console.log(`Original:  ${testCase.original}`);
		console.log(`Corrupted: ${testCase.corrupted}`);

		const fixed = fixCharacterEncoding(testCase.corrupted);
		console.log(`Fixed:     ${fixed}`);
		console.log(`Expected:  ${testCase.expected}`);

		const matches = fixed === testCase.expected;
		console.log(`Result:    ${matches ? '‚úÖ PASS' : '‚ùå FAIL'}`);

		if (!matches) {
			console.log(
				`Difference: Expected "${testCase.expected}" but got "${fixed}"`
			);
		}

		// Test URL encoding
		const encoded = encodeURIComponent(fixed);
		console.log(`URL:       ${encoded}`);
		console.log('‚îÄ'.repeat(80));
	});

	// Test the specific German URL that works
	console.log('\nüåê Testing Your Working German URL:');
	const workingAddress =
		'31 Von Vah Strasse, Mettlach, 66693, Merzig-Wadern, Saarland, Germany';
	const workingEncoded = encodeURIComponent(workingAddress);
	console.log(`Address: ${workingAddress}`);
	console.log(`Encoded: ${workingEncoded}`);
	console.log(
		`URL: https://nominatim.openstreetmap.org/search?format=json&addressdetails=1&limit=1&q=${workingEncoded}`
	);
}

testCharacterEncoding();
